///////////////////////
//  FGD for SlashCo  //
///////////////////////

@include "base.fgd"
@include "halflife2.fgd"
@include "hl2mp.fgd"

///////////////////////
//  Brush  Entities  //
///////////////////////

@SolidClass base(Targetname) = func_sc_limitedzone : "SC: Give players effects if they are in this zone."
[
    // Keys
    team(choices) : "Team" : 0 : "The team that this zone affects." =
    [
        0 : "Employees"
        1 : "Slashers"
        2 : "Both"
    ]
    effect(choices) : "Visual Effect" : 1 : "The visual effect that this zone inflicts." =
    [
        0 : "None"
        1 : "Darken"
        2 : "Blizzard"
        3 : "Poison"
    ]
    disabled(choices) : "Disabled" : 0 : "If disabled, this area has no effect." =
    [
        1 : "Yes"
        0 : "No"
    ]
    damage(integer) : "Damage" : 0 : "How much damage employees take in this zone, per 3 seconds."
    speed_effect(integer) : "Speed Effect" : -1 : "Apply a speed effect to affected players in this zone; set to -1 to disable."

    // Inputs
    input enable(void)  : "Enable the zone."
    input disable(void) : "Disable the zone."
    input toggle(void)  : "Toggle the zone."

    // Outputs
    output OnEnter(void) : "Fired when an affected player enters this zone"
    output OnEnterAll(void) : "Fired when any affected player enters this zone, and only fires again after the zone is emptied."
    output OnExit(void) : "Fired when an affected player exits this zone"
    output OnExitAll(void) : "Fired when all affected players exit this zone."
]

///////////////////////
//  Point  Entities  //
///////////////////////

@BaseClass base(Targetname) = SCSpawn
[
    // Keys
    disabled(choices) : "Disabled" : 0 : "If disabled, this spawn point will not be used." =
    [
        1 : "Yes"
        0 : "No"
    ]
    weight(integer) : "Weight" : 10 : "Determine how rare this spawn is selected. Lower values mean more rare."

    // Inputs
    input enable(void)  : "Enable the spawn point."
    input disable(void) : "Disable the spawn point."
    input toggle(void)  : "Toggle the spawn point."

    // Outputs
    output OnSpawn(void) : "Fired when this spawn point is used."
]

@BaseClass = SCForcible
[
    // Keys
    forced(choices) : "Forced" : 0 : "If true, this object is always prioritized first for spawning." =
    [
        1 : "Yes"
        0 : "No"
    ]
]

@BaseClass base(SCForcible) = SCItem
[
    // Outputs
    output OnPickedUp(void) : "Fired when the object that spawned here was picked up."
]

@PointClass base(Angles, SCSpawn, SCItem) studio("models/props_junk/metalgascan.mdl") = info_sc_gascan : "SC: Potential spawn point for a gas can." []
@PointClass base(Angles, SCSpawn, SCItem) studio("models/props_junk/gascan001a.mdl") = info_sc_gascanexposed : "SC: Potential spawn point for a gas can for the Exposed offering." []
@PointClass base(Angles, SCSpawn) studio("models/slashco/other/helicopter/helicopter.mdl") = info_sc_helicopter : "SC: A spawn location for the escape helicopter." []

@PointClass base(PlayerClass, Angles, SCSpawn) studio("models/editor/playerstart.mdl") = info_sc_player_employee : "SC: Spawn point for SlashCo employees." []
@PointClass base(PlayerClass, Angles, SCSpawn) studio("models/editor/playerstart.mdl") = info_sc_player_survivor : "SC: Spawn point for SlashCo employees. Alias of info_sc_player_employee" []
@PointClass base(PlayerClass, Angles, SCSpawn) studio("models/editor/playerstart.mdl") = info_sc_player_slasher : "SC: Spawn point for slashers." []
@PointClass base(PlayerClass, Angles, SCSpawn) studio("models/editor/playerstart.mdl") = info_sc_player_teleport : "SC: A possible position for players to teleport to." []

@PointClass base(Angles, SCSpawn, SCItem) studio("models/slashco/items/devildie.mdl") = info_sc_item : "SC: Potential spawn point for an item."
[
    // Keys
    gascans(choices) : "Gas Can Spawn" : 0 : "Whether this spot can also be a spot for gas can spawns." =
    [
        1 : "Yes"
        0 : "No"
    ]
]

@PointClass base(Angles, SCSpawn, SCItem) studio("models/items/car_battery01.mdl") = info_sc_battery : "SC: Potential spawn point for a battery."
[
    // Keys
    generator(target_destination) : "Generator" : : "The generator that this battery is associated with. All generators spawn a single battery nearby."
]

@PointClass base(Angles, SCSpawn, SCForcible) studio("models/slashco/other/generator/generator.mdl") = info_sc_generator : "SC: Potential spawn point for a generator."
[
    // Outputs
    output OnGasCanFueled(void) : "Fired when this generator has had another gas can inserted into it."
    output OnGasCanBattery(void) : "Fired when this generator has had a battery inserted into it."
    output OnGasCanComplete(void) : "Fired when this generator is powered on."
]

@PointClass base(Angles, Targetname) studio("models/slashco/other/helicopter/helicopter.mdl") = info_sc_helicopter_intro : "SC: The intro location for the helicoper." []
@PointClass base(Targetname) studio("models/slashco/other/helicopter/helicopter.mdl") = info_sc_helicopter_start : "SC: The start location for the helicoper." []

@PointClass base(Targetname) = info_sc_settings : "SC: Configure the map's settings."
[
    // Keys
    generators_needed(integer) : "Generators Needed" : 2 : "The number of generators that need to be powered for the round to each end state."
    generators_spawned(integer) : "Generators Spawned" : 2 : "The number of generators spawned in the map."
    gascans_needed(integer) : "Gas Cans Needed" : 4 : "The number of gas cans needed to fully fuel each generator."
    gascans_spawned(integer) : "Gas Cans Spawned" : 8 : "The default number of gas cans spawned in the map."

    // Inputs
    input set_generators_needed(integer) : "Set the number of generators needed for the round to each end state. This cannot be changed mid-round."
    input set_generators_spawned(integer) : "Set the number of generators spawned in the map. This cannot be changed mid-round."
    input set_gascans_needed(integer) : "Set the number of gas cans needed to fully fuel each generator. This cannot be changed mid-round."
    input set_gascans_spawned(integer) : "Set the default number of gas cans spawned in the map. This cannot be changed mid-round."

    // Outputs
    output OnGasCanFueled(void) : "Fired when a generator has had another gas can inserted into it."
    output OnGasCanBattery(void) : "Fired when a generator has had a battery inserted into it."
    output OnGasCanComplete(void) : "Fired when a generator is powered on."
    output OnAllGasCansComplete(void) : "Fired when the sufficient number of generators have been powered on."
]