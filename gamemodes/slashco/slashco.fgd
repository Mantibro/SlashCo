///////////////////////
//  FGD for SlashCo  //
///////////////////////

@include "base.fgd"
@include "halflife2.fgd"
@include "hl2mp.fgd"

///////////////////////
//   Entity  Bases   //
///////////////////////

@BaseClass base(Angles, Targetname) = SCSpawn
[
    // Keys
    disabled(choices) : "Disabled" : 0 : "If disabled, this spawn point will not be used." =
    [
        1 : "Yes"
        0 : "No"
    ]
    delete(choices) : "Delete On Spawn" : 0 : "If true, this spawn will delete itself when used. Do not use this if it is only for 'optimization'; server-side entities such as this aren't given an entity index." =
    [
        1 : "Yes"
        0 : "No"
    ]
    weight(integer) : "Weight" : 10 : "Determine how rare this spawn is selected. Lower values mean more rare."

    // Inputs
    input enable(void)  : "Enable the spawn point."
    input disable(void) : "Disable the spawn point."
    input toggle(void)  : "Toggle the spawn point."

    // Outputs
    output OnSpawn(void) : "Fired when this spawn point is used."
]

@BaseClass base(SCSpawn) = SCForcible
[
    // Keys
    forced(choices) : "Forced" : 0 : "If true, this object is always prioritized first for spawning." =
    [
        1 : "Yes"
        0 : "No"
    ]
]

@BaseClass base(SCForcible) = SCItem
[
    // Outputs
    output OnPickedUp(void) : "Fired when the object that spawned here gets picked up by an employee."
]

///////////////////////
//  Brush  Entities  //
///////////////////////

@SolidClass base(Targetname) = func_sc_limitedzone : "SC: Give players effects if they are in this zone."
[
    // Keys
    team(choices) : "Team" : 0 : "The team that this zone affects." =
    [
        0 : "Employees"
        1 : "Slashers"
        2 : "Both"
    ]
    effect(choices) : "Visual Effect" : 1 : "The visual effect that this zone inflicts." =
    [
        0 : "None"
        1 : "Darken"
        2 : "Blizzard"
        3 : "Poison"
        4 : "Blood"
        5 : "Fog"
    ]
    disabled(choices) : "Disabled" : 0 : "If disabled, this area has no effect." =
    [
        1 : "Yes"
        0 : "No"
    ]
    health_limit(integer) : "Health Limit" : 0 : "The minimum level of health that this zone can bring employees to."
    damage(integer) : "Damage" : 0 : "How much damage employees take in this zone, per 3 seconds."
    speed_effect(integer) : "Speed Effect" : -1 : "Apply a speed effect to affected employees in this zone; set to -1 to disable. If the speed set is higher than 200, the effect will have a priority of 5 (below gas cans, which give an effect at priority 10). Otherwise, the priority is 14 (above everything except Smiley's effect)."

    // Inputs
    input enable(void)  : "Enable the zone."
    input disable(void) : "Disable the zone."
    input toggle(void)  : "Toggle the zone."

    // Outputs
    output OnEnter(void) : "Fired when an affected player enters this zone"
    output OnEnterAll(void) : "Fired when any affected player enters this zone, and only fires again after the zone is emptied."
    output OnExit(void) : "Fired when an affected player exits this zone"
    output OnExitAll(void) : "Fired when all affected players exit this zone."
]

@SolidClass base(SCSpawn) = func_sc_teleportzone : "SC: Specify a zone that defines how players can teleport. Inclusive zones are placed into the same chance pool as specific teleport points."
[
    // Keys
    exclusive(choices) : "Exclusive" : 0 : "If true, this area excludes possible places that players can teleport to. Otherwise, this is an area players can *only* teleport to. Exclusive zones aren't as useful if you are using inclusive zones or specific points." =
    [
        1 : "Yes"
        0 : "No"
    ]
]

///////////////////////
//  Point  Entities  //
///////////////////////

@PointClass base(SCItem) studio("models/props_junk/metalgascan.mdl") = info_sc_gascan : "SC: A potential spawn point for a gas can." []
@PointClass base(SCItem) studio("models/props_junk/gascan001a.mdl") = info_sc_gascanexposed : "SC: A potential spawn point for a gas can for the Exposure offering." []
@PointClass base(SCSpawn) studio("models/combine_helicopter.mdl") = info_sc_helicopter : "SC: A target location for the escape helicopter. The escape helicopter will choose any of the set positions on the map." []

@PointClass base(PlayerClass, SCForcible) studio("models/editor/playerstart.mdl") = info_sc_player_employee : "SC: Spawn point for SlashCo employees." []
@PointClass base(PlayerClass, SCForcible) studio("models/editor/playerstart.mdl") = info_sc_player_survivor : "SC: Spawn point for SlashCo employees. Alias of info_sc_player_employee" []
@PointClass base(PlayerClass, SCForcible) studio("models/editor/playerstart.mdl") = info_sc_player_slasher : "SC: Spawn point for slashers." []
@PointClass base(PlayerClass, SCSpawn) studio("models/editor/playerstart.mdl") = info_sc_player_teleport : "SC: A possible position for players to teleport to. This is for any item or ability that might teleport someone. If the map has no entities of this type, these items/abilities will instead use a somewhat-unreliable backup method." []

@PointClass base(SCItem) studio("models/props_junk/MetalBucket01a.mdl") = info_sc_item : "SC: A potential spawn point for an item."
[
    // Keys
    gascan(choices) : "Gas Can Spawn" : 0 : "Whether this spot can also be a spot for gas can spawns." =
    [
        1 : "Yes"
        0 : "No"
    ]
    item(string) : "Item" : "" : "Specify the named id of an item to make this spot spawn that item. This will still act as a gas can spawn if set. If what was entered is invalid, this spawn will act as normal."
]

@PointClass base(SCItem) studio("models/items/car_battery01.mdl") = info_sc_battery : "SC: A potential spawn point for a battery."
[
    // Keys
    generator(target_destination) : "Generator" : : "The generator that this battery is associated with. All generators spawn a single battery. All generators with the name entered will have this battery spawn in their pool. If no name is set, all generators on the map will have this battery spawn in their pool."
]

@PointClass base(SCForcible) studio("models/props_vehicles/generatortrailer01.mdl") = info_sc_generator : "SC: A potential spawn point for a generator."
[
    // Outputs
    output OnFueled(void) : "Fired when this generator has had another gas can inserted into it."
    output OnInsertFuel(void) : "Fired when this generator has had a battery inserted into it."
    output OnBattery(void) : "Fired when this generator has had a battery inserted into it."
    output OnComplete(void) : "Fired when this generator is powered on."
    output OnSlasherObserved(void) : "Fired when a slasher looks at this generator. This fires every 3 seconds a slasher is looking."
]

@PointClass base(Angles, Targetname) studio("models/combine_helicopter.mdl") = info_sc_helicopter_intro : "SC: The start location for the intro helicopter at the start of the round. Only one of this entity may exist on the map." []
@PointClass base(Targetname) studio("models/combine_helicopter.mdl") = info_sc_helicopter_start : "SC: The start location for the helicopter. The intro helicopter deletes itself after reaching this position. The escape helicopter both spawns at this position and ends the round when it returns to this position. Only one of this entity may exist on the map." []

@PointClass base(Targetname) iconsprite("editor/scripted_sentence.vmt") = info_sc_settings : "SC: Configure the map's settings. Only one of this entity may exist on the map."
[
    // Keys
    generators_needed(integer) : "Generators Needed" : 2 : "The number of generators that need to be powered for the round to each end state. This value should never be above the amount of generators spawned."
    generators_spawned(integer) : "Generators Spawned" : 2 : "The number of generators spawned in the map."
    gascans_needed(integer) : "Gas Cans Needed" : 4 : "The number of gas cans needed to fully fuel each generator."
    gascans_spawned(integer) : "Gas Cans Spawned" : 8 : "The default number of gas cans spawned in the map. This value should never be below the generators spawned multiplied by the amount of gas cans needed."

    // Inputs
    input set_generators_needed(integer) : "Set the number of generators needed for the round to each the end state. This cannot be changed mid-round."
    input set_generators_spawned(integer) : "Set the number of generators spawned in the map. This cannot be changed mid-round."
    input set_gascans_needed(integer) : "Set the number of gas cans needed to fully fuel each generator. This cannot be changed mid-round."
    input set_gascans_spawned(integer) : "Set the default number of gas cans spawned in the map. This cannot be changed mid-round."

    // Outputs
    output OnPreRoundStarted(integer) : "Fired right before the round starts; this is intended for this entity's inputs. Receives the number of active players in the round."
    output OnRoundStarted(integer) : "Fired the moment the round starts. Receives the number of active players in the round."
    output OnAllGeneratorsComplete(void) : "Fired when the sufficient number of generators have been powered on."
]